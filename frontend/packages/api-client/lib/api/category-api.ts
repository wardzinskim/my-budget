/* tslint:disable */
/* eslint-disable */
/**
 * MyBudget API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from '../base';
// @ts-ignore
import { CreateBudgetCategoryRequest } from '../model';
// @ts-ignore
import { HttpValidationProblemDetails } from '../model';
// @ts-ignore
import { ProblemDetails } from '../model';
/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} id
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    archiveBudgetCategory: async (
      id: string,
      name: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('archiveBudgetCategory', 'id', id);
      // verify required parameter 'name' is not null or undefined
      assertParamExists('archiveBudgetCategory', 'name', name);
      const localVarPath = `/budget/{id}/category/{name}/archive`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'name'}}`, encodeURIComponent(String(name)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {CreateBudgetCategoryRequest} createBudgetCategoryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBudgetCategory: async (
      id: string,
      createBudgetCategoryRequest: CreateBudgetCategoryRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('createBudgetCategory', 'id', id);
      // verify required parameter 'createBudgetCategoryRequest' is not null or undefined
      assertParamExists(
        'createBudgetCategory',
        'createBudgetCategoryRequest',
        createBudgetCategoryRequest
      );
      const localVarPath = `/budget/{id}/category`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createBudgetCategoryRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} id
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async archiveBudgetCategory(
      id: string,
      name: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.archiveBudgetCategory(
          id,
          name,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CategoryApi.archiveBudgetCategory']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {CreateBudgetCategoryRequest} createBudgetCategoryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createBudgetCategory(
      id: string,
      createBudgetCategoryRequest: CreateBudgetCategoryRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createBudgetCategory(
          id,
          createBudgetCategoryRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CategoryApi.createBudgetCategory']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CategoryApiFp(configuration);
  return {
    /**
     *
     * @param {string} id
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    archiveBudgetCategory(
      id: string,
      name: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .archiveBudgetCategory(id, name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {CreateBudgetCategoryRequest} createBudgetCategoryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBudgetCategory(
      id: string,
      createBudgetCategoryRequest: CreateBudgetCategoryRequest,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .createBudgetCategory(id, createBudgetCategoryRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CategoryApi - interface
 * @export
 * @interface CategoryApi
 */
export interface CategoryApiInterface {
  /**
   *
   * @param {string} id
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CategoryApiInterface
   */
  archiveBudgetCategory(
    id: string,
    name: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;

  /**
   *
   * @param {string} id
   * @param {CreateBudgetCategoryRequest} createBudgetCategoryRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CategoryApiInterface
   */
  createBudgetCategory(
    id: string,
    createBudgetCategoryRequest: CreateBudgetCategoryRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>;
}

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI implements CategoryApiInterface {
  /**
   *
   * @param {string} id
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CategoryApi
   */
  public archiveBudgetCategory(
    id: string,
    name: string,
    options?: RawAxiosRequestConfig
  ) {
    return CategoryApiFp(this.configuration)
      .archiveBudgetCategory(id, name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {CreateBudgetCategoryRequest} createBudgetCategoryRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CategoryApi
   */
  public createBudgetCategory(
    id: string,
    createBudgetCategoryRequest: CreateBudgetCategoryRequest,
    options?: RawAxiosRequestConfig
  ) {
    return CategoryApiFp(this.configuration)
      .createBudgetCategory(id, createBudgetCategoryRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
